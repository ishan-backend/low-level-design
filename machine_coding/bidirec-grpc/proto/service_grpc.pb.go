// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: service.proto

package servicepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamingGrpc_BidirectionalStream_FullMethodName = "/StreamingGrpc/BidirectionalStream"
	StreamingGrpc_ClientSideStream_FullMethodName    = "/StreamingGrpc/ClientSideStream"
	StreamingGrpc_ServerSideStream_FullMethodName    = "/StreamingGrpc/ServerSideStream"
)

// StreamingGrpcClient is the client API for StreamingGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamingGrpcClient interface {
	BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (StreamingGrpc_BidirectionalStreamClient, error)
	ClientSideStream(ctx context.Context, opts ...grpc.CallOption) (StreamingGrpc_ClientSideStreamClient, error)
	ServerSideStream(ctx context.Context, in *ServerSideRequest, opts ...grpc.CallOption) (StreamingGrpc_ServerSideStreamClient, error)
}

type streamingGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamingGrpcClient(cc grpc.ClientConnInterface) StreamingGrpcClient {
	return &streamingGrpcClient{cc}
}

func (c *streamingGrpcClient) BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (StreamingGrpc_BidirectionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamingGrpc_ServiceDesc.Streams[0], StreamingGrpc_BidirectionalStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingGrpcBidirectionalStreamClient{stream}
	return x, nil
}

type StreamingGrpc_BidirectionalStreamClient interface {
	Send(*BidirectionalMessageRequest) error
	Recv() (*BidirectionalMessageResponse, error)
	grpc.ClientStream
}

type streamingGrpcBidirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *streamingGrpcBidirectionalStreamClient) Send(m *BidirectionalMessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingGrpcBidirectionalStreamClient) Recv() (*BidirectionalMessageResponse, error) {
	m := new(BidirectionalMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingGrpcClient) ClientSideStream(ctx context.Context, opts ...grpc.CallOption) (StreamingGrpc_ClientSideStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamingGrpc_ServiceDesc.Streams[1], StreamingGrpc_ClientSideStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingGrpcClientSideStreamClient{stream}
	return x, nil
}

type StreamingGrpc_ClientSideStreamClient interface {
	Send(*ClientMessageRequest) error
	CloseAndRecv() (*ClientMessageResponse, error)
	grpc.ClientStream
}

type streamingGrpcClientSideStreamClient struct {
	grpc.ClientStream
}

func (x *streamingGrpcClientSideStreamClient) Send(m *ClientMessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingGrpcClientSideStreamClient) CloseAndRecv() (*ClientMessageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClientMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingGrpcClient) ServerSideStream(ctx context.Context, in *ServerSideRequest, opts ...grpc.CallOption) (StreamingGrpc_ServerSideStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamingGrpc_ServiceDesc.Streams[2], StreamingGrpc_ServerSideStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingGrpcServerSideStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamingGrpc_ServerSideStreamClient interface {
	Recv() (*ServerSideResponse, error)
	grpc.ClientStream
}

type streamingGrpcServerSideStreamClient struct {
	grpc.ClientStream
}

func (x *streamingGrpcServerSideStreamClient) Recv() (*ServerSideResponse, error) {
	m := new(ServerSideResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamingGrpcServer is the server API for StreamingGrpc service.
// All implementations must embed UnimplementedStreamingGrpcServer
// for forward compatibility
type StreamingGrpcServer interface {
	BidirectionalStream(StreamingGrpc_BidirectionalStreamServer) error
	ClientSideStream(StreamingGrpc_ClientSideStreamServer) error
	ServerSideStream(*ServerSideRequest, StreamingGrpc_ServerSideStreamServer) error
	mustEmbedUnimplementedStreamingGrpcServer()
}

// UnimplementedStreamingGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedStreamingGrpcServer struct {
}

func (UnimplementedStreamingGrpcServer) BidirectionalStream(StreamingGrpc_BidirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStream not implemented")
}
func (UnimplementedStreamingGrpcServer) ClientSideStream(StreamingGrpc_ClientSideStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientSideStream not implemented")
}
func (UnimplementedStreamingGrpcServer) ServerSideStream(*ServerSideRequest, StreamingGrpc_ServerSideStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerSideStream not implemented")
}
func (UnimplementedStreamingGrpcServer) mustEmbedUnimplementedStreamingGrpcServer() {}

// UnsafeStreamingGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamingGrpcServer will
// result in compilation errors.
type UnsafeStreamingGrpcServer interface {
	mustEmbedUnimplementedStreamingGrpcServer()
}

func RegisterStreamingGrpcServer(s grpc.ServiceRegistrar, srv StreamingGrpcServer) {
	s.RegisterService(&StreamingGrpc_ServiceDesc, srv)
}

func _StreamingGrpc_BidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingGrpcServer).BidirectionalStream(&streamingGrpcBidirectionalStreamServer{stream})
}

type StreamingGrpc_BidirectionalStreamServer interface {
	Send(*BidirectionalMessageResponse) error
	Recv() (*BidirectionalMessageRequest, error)
	grpc.ServerStream
}

type streamingGrpcBidirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *streamingGrpcBidirectionalStreamServer) Send(m *BidirectionalMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingGrpcBidirectionalStreamServer) Recv() (*BidirectionalMessageRequest, error) {
	m := new(BidirectionalMessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamingGrpc_ClientSideStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingGrpcServer).ClientSideStream(&streamingGrpcClientSideStreamServer{stream})
}

type StreamingGrpc_ClientSideStreamServer interface {
	SendAndClose(*ClientMessageResponse) error
	Recv() (*ClientMessageRequest, error)
	grpc.ServerStream
}

type streamingGrpcClientSideStreamServer struct {
	grpc.ServerStream
}

func (x *streamingGrpcClientSideStreamServer) SendAndClose(m *ClientMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingGrpcClientSideStreamServer) Recv() (*ClientMessageRequest, error) {
	m := new(ClientMessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamingGrpc_ServerSideStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerSideRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamingGrpcServer).ServerSideStream(m, &streamingGrpcServerSideStreamServer{stream})
}

type StreamingGrpc_ServerSideStreamServer interface {
	Send(*ServerSideResponse) error
	grpc.ServerStream
}

type streamingGrpcServerSideStreamServer struct {
	grpc.ServerStream
}

func (x *streamingGrpcServerSideStreamServer) Send(m *ServerSideResponse) error {
	return x.ServerStream.SendMsg(m)
}

// StreamingGrpc_ServiceDesc is the grpc.ServiceDesc for StreamingGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamingGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StreamingGrpc",
	HandlerType: (*StreamingGrpcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BidirectionalStream",
			Handler:       _StreamingGrpc_BidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ClientSideStream",
			Handler:       _StreamingGrpc_ClientSideStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerSideStream",
			Handler:       _StreamingGrpc_ServerSideStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
